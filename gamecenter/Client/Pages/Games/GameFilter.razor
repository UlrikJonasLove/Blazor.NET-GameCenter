@page "/games/search"
@inject IGameRepository gameRepository
@inject IGenreRepository genreRepository

<h3>Search for Games</h3>

<EditForm Model="gameFilterDto">
<div class="form-inline">
    <label for="title" class="sr-only">Title</label>
    <input type="text" class="form-control" id="title" placeholder="Game Title" 
        @bind-value="gameFilterDto.Title" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))"/>
<div class="form-group mx-sm-3 mb-2">
    <select class="form-control" @bind="gameFilterDto.GenreId">
        <option value="0">Select a Genre</option> 
    @foreach(var genre in Genres) 
    {
        <option value="@genre.Id">@genre.Name</option>
    }
    </select>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="newlyReleases" @bind="gameFilterDto.NewlyReleases" />
        <label class="form-check-label" for="newlyReleases">
            Newly Releases
        </label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="gameFilterDto.UpcomingReleases" />
        <label class="form-check-label" for="upcomingReleases">
            Upcoming Releases
        </label>
    </div>
    <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="SearchForGames">Filter</button>
    <button type="button" class="btn btn-danger mb-2" @onclick="Clear">Clear</button>
</div>
</div>
</EditForm>
<GamesList Games="Games"></GamesList>
<Page CurrentPage="gameFilterDto.Page" AmountOfPages="amountOfPages" SelectedPage="SelectedPage"/>

@code{
    private List<Game> Games;
    private GameFilterDTO gameFilterDto = new GameFilterDTO();
    private int amountOfPages;
    private List<Genre> Genres = new List<Genre>();
    
    protected async override Task OnInitializedAsync()
    {
        var queryStrings = navigationManager.GetQueryStrings(navigationManager.Uri);
        Genres = await genreRepository.GetGenres();
        if(queryStrings != null)
        {
            FillFilterWithQueryStrings(queryStrings);
        }
            await LoadGames();
    }

    private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
    {
        if (queryStrings.ContainsKey("genreId"))
        {
            gameFilterDto.GenreId = int.Parse(queryStrings["genreId"]);
        }

        if (queryStrings.ContainsKey("title"))
        {
            gameFilterDto.Title = queryStrings["title"];
        }

        if (queryStrings.ContainsKey("newlyReleases"))
        {
            gameFilterDto.UpcomingReleases = bool.Parse(queryStrings["newlyReleases"]);
        }

        if (queryStrings.ContainsKey("upcomingReleases"))
        {
            gameFilterDto.UpcomingReleases = bool.Parse(queryStrings["upcomingReleases"]);
        }

        if (queryStrings.ContainsKey("page"))
        {
            gameFilterDto.Page = int.Parse(queryStrings["page"]);
        }
    }

    private async Task SelectedPage(int page)
    {
        gameFilterDto.Page = page;
        await LoadGames();
    }

    private async Task LoadGames() 
    {
        var queryString = GenerateQueryString();
        if(!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            navigationManager.NavigateTo("games/search" + queryString);
        }

        var pageResponse = await gameRepository.GetGamesByFilter(gameFilterDto);
        Games = pageResponse.Response;
        amountOfPages = pageResponse.AmountOfPages;
    }

    private string GenerateQueryString()
    {
        var queryStringDict = new Dictionary<string, string>();
        queryStringDict["genreId"] = gameFilterDto.GenreId.ToString();
        queryStringDict["title"] = gameFilterDto.Title ?? "";
        queryStringDict["newlyReleases"] = gameFilterDto.NewlyReleases.ToString();
        queryStringDict["upcomingReleases"] = gameFilterDto.UpcomingReleases.ToString();
        queryStringDict["page"] = gameFilterDto.Page.ToString();

        var defaultValue = new List<string>() { "false", "", "0" };

        return string.Join("&", queryStringDict
            .Where(x => !defaultValue.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }
    
    private async Task SearchForGames() 
    {
        await LoadGames();    
    }

    private async Task Clear() 
    {
        
        gameFilterDto.Title = "";
        gameFilterDto.GenreId = 0; 
        gameFilterDto.NewlyReleases = false;
        gameFilterDto.UpcomingReleases = false;
        await LoadGames();
    }

    private async Task TitleKeyPress(KeyboardEventArgs e) 
    {
        if(e.Key == "Enter")
        {
            //Implement here
            await SearchForGames();
        }
    }
}