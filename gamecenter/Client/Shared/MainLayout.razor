@inherits LayoutComponentBase
@inject IJSRuntime js

<div class="page @CssClass()">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            Theme
            <select @onchange="ChangingTheme" style="margin-left: 1rem;">
                @foreach(var theme in themes)
                {
                    <option selected="@IsSelectedTheme(theme)" value="@theme">@theme</option>
                }
            </select>
            <AuthorizeView>
                <Authorized>
                    <span>|| Welcome, @context.User.Identity.Name!</span>

                    <a href="Logout" class="nav-link btn btn-link"> Log out</a>
                </Authorized>
                <NotAuthorized>
                    <a href="Login" class="nav-link btn btn-link"> Login</a>
                    <a href="Register" class="nav-link btn btn-link">Register</a>
                </NotAuthorized>
        </AuthorizeView>
            ||
            <a href="about">
                <span aria-hidden="true" class="ml-md-auto"></span> About
            </a>
        </div>

        <div class="content px-4" style="margin-bottom: 20px;">
                @Body            
        </div>
    </div>
</div>

@code{
    private string selectedTheme = "Light";
    private List<string> themes = new List<string>{ "Light", "Dark" };
    private readonly string keyTheme = "theme";

    protected override async Task OnInitializedAsync()
    {
        var themeFromLocalStorage = await js.InvokeAsync<string>("readLocalStorage", keyTheme);
            if(!string.IsNullOrEmpty(themeFromLocalStorage))
            {
                selectedTheme = themeFromLocalStorage;
            }
    }
    private string CssClass() 
    {
        if(selectedTheme == "Light")
        {
            return String.Empty;
        }
        else 
        {
            return "dark-mode";
        }
    }

    private bool IsSelectedTheme(string theme)
    {
        return theme == selectedTheme;
    }

    private async Task ChangingTheme(ChangeEventArgs e)
    {
        selectedTheme = e.Value.ToString();
        await js.InvokeVoidAsync("addToLocalStorage", keyTheme, selectedTheme);
    }
}